// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Service/Service.proto

#include "Service/Service.pb.h"
#include "Service/Service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proto {

static const char* DBMS_method_names[] = {
  "/proto.DBMS/CreateUser",
  "/proto.DBMS/DeleteUser",
  "/proto.DBMS/UpdateUser",
  "/proto.DBMS/GetUserByUuid",
  "/proto.DBMS/GetUserByName",
  "/proto.DBMS/GetAllUser",
  "/proto.DBMS/UserLogin",
  "/proto.DBMS/UserLogout",
  "/proto.DBMS/UserOnlineHeartBeatNotifications",
  "/proto.DBMS/GetUserPermissionGroup",
  "/proto.DBMS/GetPermissionGroupByUuid",
  "/proto.DBMS/GetPermissionGroupByName",
  "/proto.DBMS/GetAllPermissionGroup",
  "/proto.DBMS/ChangeUserPermissionGroup",
  "/proto.DBMS/CreateProject",
  "/proto.DBMS/DeleteProject",
  "/proto.DBMS/UpdateProject",
  "/proto.DBMS/GetProject",
  "/proto.DBMS/GetAllProject",
  "/proto.DBMS/CreateSwc",
  "/proto.DBMS/DeleteSwc",
  "/proto.DBMS/UpdateSwc",
  "/proto.DBMS/GetSwcMetaInfo",
  "/proto.DBMS/GetAllSwcMetaInfo",
  "/proto.DBMS/CreateSwcSnapshot",
  "/proto.DBMS/GetAllSnapshotMetaInfo",
  "/proto.DBMS/GetSnapshot",
  "/proto.DBMS/GetAllIncrementOperationMetaInfo",
  "/proto.DBMS/GetIncrementOperation",
  "/proto.DBMS/CreateSwcNodeData",
  "/proto.DBMS/DeleteSwcNodeData",
  "/proto.DBMS/UpdateSwcNodeData",
  "/proto.DBMS/GetSwcNodeData",
  "/proto.DBMS/GetSwcFullNodeData",
  "/proto.DBMS/GetSwcNodeDataListByTimeAndUser",
  "/proto.DBMS/CreateDailyStatistics",
  "/proto.DBMS/DeleteDailyStatistics",
  "/proto.DBMS/UpdateDailyStatistics",
  "/proto.DBMS/GetDailyStatistics",
  "/proto.DBMS/GetAllDailyStatistics",
  "/proto.DBMS/CreateSwcAttachmentAno",
  "/proto.DBMS/DeleteSwcAttachmentAno",
  "/proto.DBMS/UpdateSwcAttachmentAno",
  "/proto.DBMS/GetSwcAttachmentAno",
  "/proto.DBMS/CreateSwcAttachmentApo",
  "/proto.DBMS/DeleteSwcAttachmentApo",
  "/proto.DBMS/UpdateSwcAttachmentApo",
  "/proto.DBMS/GetSwcAttachmentApo",
  "/proto.DBMS/RevertSwcVersion",
  "/proto.DBMS/CreateSwcAttachmentSwc",
  "/proto.DBMS/DeleteSwcAttachmentSwc",
  "/proto.DBMS/UpdateSwcAttachmentSwc",
  "/proto.DBMS/GetSwcAttachmentSwc",
  "/proto.DBMS/CreatePermissionGroup",
  "/proto.DBMS/DeletePermissionGroup",
  "/proto.DBMS/UpdatePermissionGroup",
  "/proto.DBMS/GetProjectSwcNamesByProjectUuid",
  "/proto.DBMS/UpdateSwcNParentInfo",
  "/proto.DBMS/ClearAllNodes",
  "/proto.DBMS/OverwriteSwcNodeData",
};

std::unique_ptr< DBMS::Stub> DBMS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DBMS::Stub> stub(new DBMS::Stub(channel, options));
  return stub;
}

DBMS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateUser_(DBMS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(DBMS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(DBMS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserByUuid_(DBMS_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserByName_(DBMS_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllUser_(DBMS_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLogin_(DBMS_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLogout_(DBMS_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserOnlineHeartBeatNotifications_(DBMS_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserPermissionGroup_(DBMS_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionGroupByUuid_(DBMS_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissionGroupByName_(DBMS_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllPermissionGroup_(DBMS_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeUserPermissionGroup_(DBMS_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProject_(DBMS_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProject_(DBMS_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProject_(DBMS_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProject_(DBMS_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllProject_(DBMS_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSwc_(DBMS_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSwc_(DBMS_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSwc_(DBMS_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcMetaInfo_(DBMS_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllSwcMetaInfo_(DBMS_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSwcSnapshot_(DBMS_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllSnapshotMetaInfo_(DBMS_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSnapshot_(DBMS_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllIncrementOperationMetaInfo_(DBMS_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIncrementOperation_(DBMS_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSwcNodeData_(DBMS_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSwcNodeData_(DBMS_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSwcNodeData_(DBMS_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcNodeData_(DBMS_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcFullNodeData_(DBMS_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcNodeDataListByTimeAndUser_(DBMS_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDailyStatistics_(DBMS_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDailyStatistics_(DBMS_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDailyStatistics_(DBMS_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDailyStatistics_(DBMS_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllDailyStatistics_(DBMS_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSwcAttachmentAno_(DBMS_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSwcAttachmentAno_(DBMS_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSwcAttachmentAno_(DBMS_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcAttachmentAno_(DBMS_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSwcAttachmentApo_(DBMS_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSwcAttachmentApo_(DBMS_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSwcAttachmentApo_(DBMS_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcAttachmentApo_(DBMS_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RevertSwcVersion_(DBMS_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSwcAttachmentSwc_(DBMS_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSwcAttachmentSwc_(DBMS_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSwcAttachmentSwc_(DBMS_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSwcAttachmentSwc_(DBMS_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePermissionGroup_(DBMS_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissionGroup_(DBMS_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePermissionGroup_(DBMS_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProjectSwcNamesByProjectUuid_(DBMS_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSwcNParentInfo_(DBMS_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearAllNodes_(DBMS_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OverwriteSwcNodeData_(DBMS_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DBMS::Stub::CreateUser(::grpc::ClientContext* context, const ::proto::CreateUserRequest& request, ::proto::CreateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateUserRequest, ::proto::CreateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void DBMS::Stub::async::CreateUser(::grpc::ClientContext* context, const ::proto::CreateUserRequest* request, ::proto::CreateUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateUserRequest, ::proto::CreateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateUser(::grpc::ClientContext* context, const ::proto::CreateUserRequest* request, ::proto::CreateUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateUserResponse>* DBMS::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::proto::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateUserResponse, ::proto::CreateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateUserResponse>* DBMS::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::proto::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteUser(::grpc::ClientContext* context, const ::proto::DeleteUserRequest& request, ::proto::DeleteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteUserRequest, ::proto::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void DBMS::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::proto::DeleteUserRequest* request, ::proto::DeleteUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteUserRequest, ::proto::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteUser(::grpc::ClientContext* context, const ::proto::DeleteUserRequest* request, ::proto::DeleteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteUserResponse>* DBMS::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::proto::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteUserResponse, ::proto::DeleteUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteUserResponse>* DBMS::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::proto::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateUser(::grpc::ClientContext* context, const ::proto::UpdateUserRequest& request, ::proto::UpdateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateUserRequest, ::proto::UpdateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void DBMS::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::proto::UpdateUserRequest* request, ::proto::UpdateUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateUserRequest, ::proto::UpdateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::proto::UpdateUserRequest* request, ::proto::UpdateUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateUserResponse>* DBMS::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::proto::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateUserResponse, ::proto::UpdateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateUserResponse>* DBMS::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::proto::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetUserByUuid(::grpc::ClientContext* context, const ::proto::GetUserByUuidRequest& request, ::proto::GetUserByUuidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetUserByUuidRequest, ::proto::GetUserByUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserByUuid_, context, request, response);
}

void DBMS::Stub::async::GetUserByUuid(::grpc::ClientContext* context, const ::proto::GetUserByUuidRequest* request, ::proto::GetUserByUuidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetUserByUuidRequest, ::proto::GetUserByUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserByUuid_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetUserByUuid(::grpc::ClientContext* context, const ::proto::GetUserByUuidRequest* request, ::proto::GetUserByUuidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserByUuid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetUserByUuidResponse>* DBMS::Stub::PrepareAsyncGetUserByUuidRaw(::grpc::ClientContext* context, const ::proto::GetUserByUuidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetUserByUuidResponse, ::proto::GetUserByUuidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserByUuid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetUserByUuidResponse>* DBMS::Stub::AsyncGetUserByUuidRaw(::grpc::ClientContext* context, const ::proto::GetUserByUuidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserByUuidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetUserByName(::grpc::ClientContext* context, const ::proto::GetUserByNameRequest& request, ::proto::GetUserByNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetUserByNameRequest, ::proto::GetUserByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserByName_, context, request, response);
}

void DBMS::Stub::async::GetUserByName(::grpc::ClientContext* context, const ::proto::GetUserByNameRequest* request, ::proto::GetUserByNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetUserByNameRequest, ::proto::GetUserByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserByName_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetUserByName(::grpc::ClientContext* context, const ::proto::GetUserByNameRequest* request, ::proto::GetUserByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetUserByNameResponse>* DBMS::Stub::PrepareAsyncGetUserByNameRaw(::grpc::ClientContext* context, const ::proto::GetUserByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetUserByNameResponse, ::proto::GetUserByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetUserByNameResponse>* DBMS::Stub::AsyncGetUserByNameRaw(::grpc::ClientContext* context, const ::proto::GetUserByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllUser(::grpc::ClientContext* context, const ::proto::GetAllUserRequest& request, ::proto::GetAllUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllUserRequest, ::proto::GetAllUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllUser_, context, request, response);
}

void DBMS::Stub::async::GetAllUser(::grpc::ClientContext* context, const ::proto::GetAllUserRequest* request, ::proto::GetAllUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllUserRequest, ::proto::GetAllUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllUser_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllUser(::grpc::ClientContext* context, const ::proto::GetAllUserRequest* request, ::proto::GetAllUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllUserResponse>* DBMS::Stub::PrepareAsyncGetAllUserRaw(::grpc::ClientContext* context, const ::proto::GetAllUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllUserResponse, ::proto::GetAllUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllUserResponse>* DBMS::Stub::AsyncGetAllUserRaw(::grpc::ClientContext* context, const ::proto::GetAllUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UserLogin(::grpc::ClientContext* context, const ::proto::UserLoginRequest& request, ::proto::UserLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UserLoginRequest, ::proto::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLogin_, context, request, response);
}

void DBMS::Stub::async::UserLogin(::grpc::ClientContext* context, const ::proto::UserLoginRequest* request, ::proto::UserLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UserLoginRequest, ::proto::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UserLogin(::grpc::ClientContext* context, const ::proto::UserLoginRequest* request, ::proto::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UserLoginResponse>* DBMS::Stub::PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::proto::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UserLoginResponse, ::proto::UserLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UserLoginResponse>* DBMS::Stub::AsyncUserLoginRaw(::grpc::ClientContext* context, const ::proto::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UserLogout(::grpc::ClientContext* context, const ::proto::UserLogoutRequest& request, ::proto::UserLogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UserLogoutRequest, ::proto::UserLogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLogout_, context, request, response);
}

void DBMS::Stub::async::UserLogout(::grpc::ClientContext* context, const ::proto::UserLogoutRequest* request, ::proto::UserLogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UserLogoutRequest, ::proto::UserLogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogout_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UserLogout(::grpc::ClientContext* context, const ::proto::UserLogoutRequest* request, ::proto::UserLogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UserLogoutResponse>* DBMS::Stub::PrepareAsyncUserLogoutRaw(::grpc::ClientContext* context, const ::proto::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UserLogoutResponse, ::proto::UserLogoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLogout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UserLogoutResponse>* DBMS::Stub::AsyncUserLogoutRaw(::grpc::ClientContext* context, const ::proto::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UserOnlineHeartBeatNotifications(::grpc::ClientContext* context, const ::proto::UserOnlineHeartBeatNotification& request, ::proto::UserOnlineHeartBeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UserOnlineHeartBeatNotification, ::proto::UserOnlineHeartBeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserOnlineHeartBeatNotifications_, context, request, response);
}

void DBMS::Stub::async::UserOnlineHeartBeatNotifications(::grpc::ClientContext* context, const ::proto::UserOnlineHeartBeatNotification* request, ::proto::UserOnlineHeartBeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UserOnlineHeartBeatNotification, ::proto::UserOnlineHeartBeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserOnlineHeartBeatNotifications_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UserOnlineHeartBeatNotifications(::grpc::ClientContext* context, const ::proto::UserOnlineHeartBeatNotification* request, ::proto::UserOnlineHeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserOnlineHeartBeatNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UserOnlineHeartBeatResponse>* DBMS::Stub::PrepareAsyncUserOnlineHeartBeatNotificationsRaw(::grpc::ClientContext* context, const ::proto::UserOnlineHeartBeatNotification& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UserOnlineHeartBeatResponse, ::proto::UserOnlineHeartBeatNotification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserOnlineHeartBeatNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UserOnlineHeartBeatResponse>* DBMS::Stub::AsyncUserOnlineHeartBeatNotificationsRaw(::grpc::ClientContext* context, const ::proto::UserOnlineHeartBeatNotification& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserOnlineHeartBeatNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetUserPermissionGroup(::grpc::ClientContext* context, const ::proto::GetUserPermissionGroupRequest& request, ::proto::GetUserPermissionGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetUserPermissionGroupRequest, ::proto::GetUserPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserPermissionGroup_, context, request, response);
}

void DBMS::Stub::async::GetUserPermissionGroup(::grpc::ClientContext* context, const ::proto::GetUserPermissionGroupRequest* request, ::proto::GetUserPermissionGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetUserPermissionGroupRequest, ::proto::GetUserPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserPermissionGroup_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetUserPermissionGroup(::grpc::ClientContext* context, const ::proto::GetUserPermissionGroupRequest* request, ::proto::GetUserPermissionGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserPermissionGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetUserPermissionGroupResponse>* DBMS::Stub::PrepareAsyncGetUserPermissionGroupRaw(::grpc::ClientContext* context, const ::proto::GetUserPermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetUserPermissionGroupResponse, ::proto::GetUserPermissionGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserPermissionGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetUserPermissionGroupResponse>* DBMS::Stub::AsyncGetUserPermissionGroupRaw(::grpc::ClientContext* context, const ::proto::GetUserPermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserPermissionGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetPermissionGroupByUuid(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByUuidRequest& request, ::proto::GetPermissionGroupByUuidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetPermissionGroupByUuidRequest, ::proto::GetPermissionGroupByUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionGroupByUuid_, context, request, response);
}

void DBMS::Stub::async::GetPermissionGroupByUuid(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByUuidRequest* request, ::proto::GetPermissionGroupByUuidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetPermissionGroupByUuidRequest, ::proto::GetPermissionGroupByUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionGroupByUuid_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetPermissionGroupByUuid(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByUuidRequest* request, ::proto::GetPermissionGroupByUuidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionGroupByUuid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetPermissionGroupByUuidResponse>* DBMS::Stub::PrepareAsyncGetPermissionGroupByUuidRaw(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByUuidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetPermissionGroupByUuidResponse, ::proto::GetPermissionGroupByUuidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionGroupByUuid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetPermissionGroupByUuidResponse>* DBMS::Stub::AsyncGetPermissionGroupByUuidRaw(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByUuidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionGroupByUuidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetPermissionGroupByName(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByNameRequest& request, ::proto::GetPermissionGroupByNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetPermissionGroupByNameRequest, ::proto::GetPermissionGroupByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPermissionGroupByName_, context, request, response);
}

void DBMS::Stub::async::GetPermissionGroupByName(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByNameRequest* request, ::proto::GetPermissionGroupByNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetPermissionGroupByNameRequest, ::proto::GetPermissionGroupByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionGroupByName_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetPermissionGroupByName(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByNameRequest* request, ::proto::GetPermissionGroupByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPermissionGroupByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetPermissionGroupByNameResponse>* DBMS::Stub::PrepareAsyncGetPermissionGroupByNameRaw(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetPermissionGroupByNameResponse, ::proto::GetPermissionGroupByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPermissionGroupByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetPermissionGroupByNameResponse>* DBMS::Stub::AsyncGetPermissionGroupByNameRaw(::grpc::ClientContext* context, const ::proto::GetPermissionGroupByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPermissionGroupByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllPermissionGroup(::grpc::ClientContext* context, const ::proto::GetAllPermissionGroupRequest& request, ::proto::GetAllPermissionGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllPermissionGroupRequest, ::proto::GetAllPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllPermissionGroup_, context, request, response);
}

void DBMS::Stub::async::GetAllPermissionGroup(::grpc::ClientContext* context, const ::proto::GetAllPermissionGroupRequest* request, ::proto::GetAllPermissionGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllPermissionGroupRequest, ::proto::GetAllPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllPermissionGroup_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllPermissionGroup(::grpc::ClientContext* context, const ::proto::GetAllPermissionGroupRequest* request, ::proto::GetAllPermissionGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllPermissionGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllPermissionGroupResponse>* DBMS::Stub::PrepareAsyncGetAllPermissionGroupRaw(::grpc::ClientContext* context, const ::proto::GetAllPermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllPermissionGroupResponse, ::proto::GetAllPermissionGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllPermissionGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllPermissionGroupResponse>* DBMS::Stub::AsyncGetAllPermissionGroupRaw(::grpc::ClientContext* context, const ::proto::GetAllPermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllPermissionGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::ChangeUserPermissionGroup(::grpc::ClientContext* context, const ::proto::ChangeUserPermissionGroupRequest& request, ::proto::ChangeUserPermissionGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::ChangeUserPermissionGroupRequest, ::proto::ChangeUserPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeUserPermissionGroup_, context, request, response);
}

void DBMS::Stub::async::ChangeUserPermissionGroup(::grpc::ClientContext* context, const ::proto::ChangeUserPermissionGroupRequest* request, ::proto::ChangeUserPermissionGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::ChangeUserPermissionGroupRequest, ::proto::ChangeUserPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeUserPermissionGroup_, context, request, response, std::move(f));
}

void DBMS::Stub::async::ChangeUserPermissionGroup(::grpc::ClientContext* context, const ::proto::ChangeUserPermissionGroupRequest* request, ::proto::ChangeUserPermissionGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeUserPermissionGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::ChangeUserPermissionGroupResponse>* DBMS::Stub::PrepareAsyncChangeUserPermissionGroupRaw(::grpc::ClientContext* context, const ::proto::ChangeUserPermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::ChangeUserPermissionGroupResponse, ::proto::ChangeUserPermissionGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeUserPermissionGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::ChangeUserPermissionGroupResponse>* DBMS::Stub::AsyncChangeUserPermissionGroupRaw(::grpc::ClientContext* context, const ::proto::ChangeUserPermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeUserPermissionGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateProject(::grpc::ClientContext* context, const ::proto::CreateProjectRequest& request, ::proto::CreateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateProjectRequest, ::proto::CreateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProject_, context, request, response);
}

void DBMS::Stub::async::CreateProject(::grpc::ClientContext* context, const ::proto::CreateProjectRequest* request, ::proto::CreateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateProjectRequest, ::proto::CreateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateProject(::grpc::ClientContext* context, const ::proto::CreateProjectRequest* request, ::proto::CreateProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateProjectResponse>* DBMS::Stub::PrepareAsyncCreateProjectRaw(::grpc::ClientContext* context, const ::proto::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateProjectResponse, ::proto::CreateProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateProjectResponse>* DBMS::Stub::AsyncCreateProjectRaw(::grpc::ClientContext* context, const ::proto::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteProject(::grpc::ClientContext* context, const ::proto::DeleteProjectRequest& request, ::proto::DeleteProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteProjectRequest, ::proto::DeleteProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteProject_, context, request, response);
}

void DBMS::Stub::async::DeleteProject(::grpc::ClientContext* context, const ::proto::DeleteProjectRequest* request, ::proto::DeleteProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteProjectRequest, ::proto::DeleteProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProject_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteProject(::grpc::ClientContext* context, const ::proto::DeleteProjectRequest* request, ::proto::DeleteProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteProjectResponse>* DBMS::Stub::PrepareAsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::proto::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteProjectResponse, ::proto::DeleteProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteProjectResponse>* DBMS::Stub::AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::proto::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateProject(::grpc::ClientContext* context, const ::proto::UpdateProjectRequest& request, ::proto::UpdateProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateProjectRequest, ::proto::UpdateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateProject_, context, request, response);
}

void DBMS::Stub::async::UpdateProject(::grpc::ClientContext* context, const ::proto::UpdateProjectRequest* request, ::proto::UpdateProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateProjectRequest, ::proto::UpdateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateProject(::grpc::ClientContext* context, const ::proto::UpdateProjectRequest* request, ::proto::UpdateProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateProjectResponse>* DBMS::Stub::PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::proto::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateProjectResponse, ::proto::UpdateProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateProjectResponse>* DBMS::Stub::AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::proto::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetProject(::grpc::ClientContext* context, const ::proto::GetProjectRequest& request, ::proto::GetProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetProjectRequest, ::proto::GetProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProject_, context, request, response);
}

void DBMS::Stub::async::GetProject(::grpc::ClientContext* context, const ::proto::GetProjectRequest* request, ::proto::GetProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetProjectRequest, ::proto::GetProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetProject(::grpc::ClientContext* context, const ::proto::GetProjectRequest* request, ::proto::GetProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetProjectResponse>* DBMS::Stub::PrepareAsyncGetProjectRaw(::grpc::ClientContext* context, const ::proto::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetProjectResponse, ::proto::GetProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetProjectResponse>* DBMS::Stub::AsyncGetProjectRaw(::grpc::ClientContext* context, const ::proto::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllProject(::grpc::ClientContext* context, const ::proto::GetAllProjectRequest& request, ::proto::GetAllProjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllProjectRequest, ::proto::GetAllProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllProject_, context, request, response);
}

void DBMS::Stub::async::GetAllProject(::grpc::ClientContext* context, const ::proto::GetAllProjectRequest* request, ::proto::GetAllProjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllProjectRequest, ::proto::GetAllProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllProject_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllProject(::grpc::ClientContext* context, const ::proto::GetAllProjectRequest* request, ::proto::GetAllProjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllProjectResponse>* DBMS::Stub::PrepareAsyncGetAllProjectRaw(::grpc::ClientContext* context, const ::proto::GetAllProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllProjectResponse, ::proto::GetAllProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllProject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllProjectResponse>* DBMS::Stub::AsyncGetAllProjectRaw(::grpc::ClientContext* context, const ::proto::GetAllProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllProjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateSwc(::grpc::ClientContext* context, const ::proto::CreateSwcRequest& request, ::proto::CreateSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateSwcRequest, ::proto::CreateSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSwc_, context, request, response);
}

void DBMS::Stub::async::CreateSwc(::grpc::ClientContext* context, const ::proto::CreateSwcRequest* request, ::proto::CreateSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateSwcRequest, ::proto::CreateSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateSwc(::grpc::ClientContext* context, const ::proto::CreateSwcRequest* request, ::proto::CreateSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcResponse>* DBMS::Stub::PrepareAsyncCreateSwcRaw(::grpc::ClientContext* context, const ::proto::CreateSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateSwcResponse, ::proto::CreateSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcResponse>* DBMS::Stub::AsyncCreateSwcRaw(::grpc::ClientContext* context, const ::proto::CreateSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteSwc(::grpc::ClientContext* context, const ::proto::DeleteSwcRequest& request, ::proto::DeleteSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteSwcRequest, ::proto::DeleteSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSwc_, context, request, response);
}

void DBMS::Stub::async::DeleteSwc(::grpc::ClientContext* context, const ::proto::DeleteSwcRequest* request, ::proto::DeleteSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteSwcRequest, ::proto::DeleteSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteSwc(::grpc::ClientContext* context, const ::proto::DeleteSwcRequest* request, ::proto::DeleteSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcResponse>* DBMS::Stub::PrepareAsyncDeleteSwcRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteSwcResponse, ::proto::DeleteSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcResponse>* DBMS::Stub::AsyncDeleteSwcRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateSwc(::grpc::ClientContext* context, const ::proto::UpdateSwcRequest& request, ::proto::UpdateSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateSwcRequest, ::proto::UpdateSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSwc_, context, request, response);
}

void DBMS::Stub::async::UpdateSwc(::grpc::ClientContext* context, const ::proto::UpdateSwcRequest* request, ::proto::UpdateSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateSwcRequest, ::proto::UpdateSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateSwc(::grpc::ClientContext* context, const ::proto::UpdateSwcRequest* request, ::proto::UpdateSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcResponse>* DBMS::Stub::PrepareAsyncUpdateSwcRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateSwcResponse, ::proto::UpdateSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcResponse>* DBMS::Stub::AsyncUpdateSwcRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcMetaInfo(::grpc::ClientContext* context, const ::proto::GetSwcMetaInfoRequest& request, ::proto::GetSwcMetaInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcMetaInfoRequest, ::proto::GetSwcMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcMetaInfo_, context, request, response);
}

void DBMS::Stub::async::GetSwcMetaInfo(::grpc::ClientContext* context, const ::proto::GetSwcMetaInfoRequest* request, ::proto::GetSwcMetaInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcMetaInfoRequest, ::proto::GetSwcMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcMetaInfo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcMetaInfo(::grpc::ClientContext* context, const ::proto::GetSwcMetaInfoRequest* request, ::proto::GetSwcMetaInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcMetaInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcMetaInfoResponse>* DBMS::Stub::PrepareAsyncGetSwcMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetSwcMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcMetaInfoResponse, ::proto::GetSwcMetaInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcMetaInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcMetaInfoResponse>* DBMS::Stub::AsyncGetSwcMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetSwcMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcMetaInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllSwcMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllSwcMetaInfoRequest& request, ::proto::GetAllSwcMetaInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllSwcMetaInfoRequest, ::proto::GetAllSwcMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllSwcMetaInfo_, context, request, response);
}

void DBMS::Stub::async::GetAllSwcMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllSwcMetaInfoRequest* request, ::proto::GetAllSwcMetaInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllSwcMetaInfoRequest, ::proto::GetAllSwcMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSwcMetaInfo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllSwcMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllSwcMetaInfoRequest* request, ::proto::GetAllSwcMetaInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSwcMetaInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllSwcMetaInfoResponse>* DBMS::Stub::PrepareAsyncGetAllSwcMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetAllSwcMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllSwcMetaInfoResponse, ::proto::GetAllSwcMetaInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllSwcMetaInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllSwcMetaInfoResponse>* DBMS::Stub::AsyncGetAllSwcMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetAllSwcMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllSwcMetaInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateSwcSnapshot(::grpc::ClientContext* context, const ::proto::CreateSwcSnapshotRequest& request, ::proto::CreateSwcSnapshotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateSwcSnapshotRequest, ::proto::CreateSwcSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSwcSnapshot_, context, request, response);
}

void DBMS::Stub::async::CreateSwcSnapshot(::grpc::ClientContext* context, const ::proto::CreateSwcSnapshotRequest* request, ::proto::CreateSwcSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateSwcSnapshotRequest, ::proto::CreateSwcSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcSnapshot_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateSwcSnapshot(::grpc::ClientContext* context, const ::proto::CreateSwcSnapshotRequest* request, ::proto::CreateSwcSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcSnapshotResponse>* DBMS::Stub::PrepareAsyncCreateSwcSnapshotRaw(::grpc::ClientContext* context, const ::proto::CreateSwcSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateSwcSnapshotResponse, ::proto::CreateSwcSnapshotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSwcSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcSnapshotResponse>* DBMS::Stub::AsyncCreateSwcSnapshotRaw(::grpc::ClientContext* context, const ::proto::CreateSwcSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSwcSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllSnapshotMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllSnapshotMetaInfoRequest& request, ::proto::GetAllSnapshotMetaInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllSnapshotMetaInfoRequest, ::proto::GetAllSnapshotMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllSnapshotMetaInfo_, context, request, response);
}

void DBMS::Stub::async::GetAllSnapshotMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllSnapshotMetaInfoRequest* request, ::proto::GetAllSnapshotMetaInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllSnapshotMetaInfoRequest, ::proto::GetAllSnapshotMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSnapshotMetaInfo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllSnapshotMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllSnapshotMetaInfoRequest* request, ::proto::GetAllSnapshotMetaInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSnapshotMetaInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllSnapshotMetaInfoResponse>* DBMS::Stub::PrepareAsyncGetAllSnapshotMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetAllSnapshotMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllSnapshotMetaInfoResponse, ::proto::GetAllSnapshotMetaInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllSnapshotMetaInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllSnapshotMetaInfoResponse>* DBMS::Stub::AsyncGetAllSnapshotMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetAllSnapshotMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllSnapshotMetaInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSnapshot(::grpc::ClientContext* context, const ::proto::GetSnapshotRequest& request, ::proto::GetSnapshotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSnapshotRequest, ::proto::GetSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSnapshot_, context, request, response);
}

void DBMS::Stub::async::GetSnapshot(::grpc::ClientContext* context, const ::proto::GetSnapshotRequest* request, ::proto::GetSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSnapshotRequest, ::proto::GetSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSnapshot_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSnapshot(::grpc::ClientContext* context, const ::proto::GetSnapshotRequest* request, ::proto::GetSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSnapshotResponse>* DBMS::Stub::PrepareAsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::proto::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSnapshotResponse, ::proto::GetSnapshotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSnapshotResponse>* DBMS::Stub::AsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::proto::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllIncrementOperationMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllIncrementOperationMetaInfoRequest& request, ::proto::GetAllIncrementOperationMetaInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllIncrementOperationMetaInfoRequest, ::proto::GetAllIncrementOperationMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllIncrementOperationMetaInfo_, context, request, response);
}

void DBMS::Stub::async::GetAllIncrementOperationMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllIncrementOperationMetaInfoRequest* request, ::proto::GetAllIncrementOperationMetaInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllIncrementOperationMetaInfoRequest, ::proto::GetAllIncrementOperationMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllIncrementOperationMetaInfo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllIncrementOperationMetaInfo(::grpc::ClientContext* context, const ::proto::GetAllIncrementOperationMetaInfoRequest* request, ::proto::GetAllIncrementOperationMetaInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllIncrementOperationMetaInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllIncrementOperationMetaInfoResponse>* DBMS::Stub::PrepareAsyncGetAllIncrementOperationMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetAllIncrementOperationMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllIncrementOperationMetaInfoResponse, ::proto::GetAllIncrementOperationMetaInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllIncrementOperationMetaInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllIncrementOperationMetaInfoResponse>* DBMS::Stub::AsyncGetAllIncrementOperationMetaInfoRaw(::grpc::ClientContext* context, const ::proto::GetAllIncrementOperationMetaInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllIncrementOperationMetaInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetIncrementOperation(::grpc::ClientContext* context, const ::proto::GetIncrementOperationRequest& request, ::proto::GetIncrementOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetIncrementOperationRequest, ::proto::GetIncrementOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIncrementOperation_, context, request, response);
}

void DBMS::Stub::async::GetIncrementOperation(::grpc::ClientContext* context, const ::proto::GetIncrementOperationRequest* request, ::proto::GetIncrementOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetIncrementOperationRequest, ::proto::GetIncrementOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIncrementOperation_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetIncrementOperation(::grpc::ClientContext* context, const ::proto::GetIncrementOperationRequest* request, ::proto::GetIncrementOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIncrementOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetIncrementOperationResponse>* DBMS::Stub::PrepareAsyncGetIncrementOperationRaw(::grpc::ClientContext* context, const ::proto::GetIncrementOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetIncrementOperationResponse, ::proto::GetIncrementOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIncrementOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetIncrementOperationResponse>* DBMS::Stub::AsyncGetIncrementOperationRaw(::grpc::ClientContext* context, const ::proto::GetIncrementOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIncrementOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateSwcNodeData(::grpc::ClientContext* context, const ::proto::CreateSwcNodeDataRequest& request, ::proto::CreateSwcNodeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateSwcNodeDataRequest, ::proto::CreateSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSwcNodeData_, context, request, response);
}

void DBMS::Stub::async::CreateSwcNodeData(::grpc::ClientContext* context, const ::proto::CreateSwcNodeDataRequest* request, ::proto::CreateSwcNodeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateSwcNodeDataRequest, ::proto::CreateSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcNodeData_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateSwcNodeData(::grpc::ClientContext* context, const ::proto::CreateSwcNodeDataRequest* request, ::proto::CreateSwcNodeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcNodeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcNodeDataResponse>* DBMS::Stub::PrepareAsyncCreateSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::CreateSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateSwcNodeDataResponse, ::proto::CreateSwcNodeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSwcNodeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcNodeDataResponse>* DBMS::Stub::AsyncCreateSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::CreateSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSwcNodeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteSwcNodeData(::grpc::ClientContext* context, const ::proto::DeleteSwcNodeDataRequest& request, ::proto::DeleteSwcNodeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteSwcNodeDataRequest, ::proto::DeleteSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSwcNodeData_, context, request, response);
}

void DBMS::Stub::async::DeleteSwcNodeData(::grpc::ClientContext* context, const ::proto::DeleteSwcNodeDataRequest* request, ::proto::DeleteSwcNodeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteSwcNodeDataRequest, ::proto::DeleteSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcNodeData_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteSwcNodeData(::grpc::ClientContext* context, const ::proto::DeleteSwcNodeDataRequest* request, ::proto::DeleteSwcNodeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcNodeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcNodeDataResponse>* DBMS::Stub::PrepareAsyncDeleteSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteSwcNodeDataResponse, ::proto::DeleteSwcNodeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSwcNodeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcNodeDataResponse>* DBMS::Stub::AsyncDeleteSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSwcNodeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateSwcNodeData(::grpc::ClientContext* context, const ::proto::UpdateSwcNodeDataRequest& request, ::proto::UpdateSwcNodeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateSwcNodeDataRequest, ::proto::UpdateSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSwcNodeData_, context, request, response);
}

void DBMS::Stub::async::UpdateSwcNodeData(::grpc::ClientContext* context, const ::proto::UpdateSwcNodeDataRequest* request, ::proto::UpdateSwcNodeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateSwcNodeDataRequest, ::proto::UpdateSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcNodeData_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateSwcNodeData(::grpc::ClientContext* context, const ::proto::UpdateSwcNodeDataRequest* request, ::proto::UpdateSwcNodeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcNodeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcNodeDataResponse>* DBMS::Stub::PrepareAsyncUpdateSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateSwcNodeDataResponse, ::proto::UpdateSwcNodeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSwcNodeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcNodeDataResponse>* DBMS::Stub::AsyncUpdateSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSwcNodeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcNodeData(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataRequest& request, ::proto::GetSwcNodeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcNodeDataRequest, ::proto::GetSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcNodeData_, context, request, response);
}

void DBMS::Stub::async::GetSwcNodeData(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataRequest* request, ::proto::GetSwcNodeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcNodeDataRequest, ::proto::GetSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcNodeData_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcNodeData(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataRequest* request, ::proto::GetSwcNodeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcNodeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcNodeDataResponse>* DBMS::Stub::PrepareAsyncGetSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcNodeDataResponse, ::proto::GetSwcNodeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcNodeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcNodeDataResponse>* DBMS::Stub::AsyncGetSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcNodeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcFullNodeData(::grpc::ClientContext* context, const ::proto::GetSwcFullNodeDataRequest& request, ::proto::GetSwcFullNodeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcFullNodeDataRequest, ::proto::GetSwcFullNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcFullNodeData_, context, request, response);
}

void DBMS::Stub::async::GetSwcFullNodeData(::grpc::ClientContext* context, const ::proto::GetSwcFullNodeDataRequest* request, ::proto::GetSwcFullNodeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcFullNodeDataRequest, ::proto::GetSwcFullNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcFullNodeData_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcFullNodeData(::grpc::ClientContext* context, const ::proto::GetSwcFullNodeDataRequest* request, ::proto::GetSwcFullNodeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcFullNodeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcFullNodeDataResponse>* DBMS::Stub::PrepareAsyncGetSwcFullNodeDataRaw(::grpc::ClientContext* context, const ::proto::GetSwcFullNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcFullNodeDataResponse, ::proto::GetSwcFullNodeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcFullNodeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcFullNodeDataResponse>* DBMS::Stub::AsyncGetSwcFullNodeDataRaw(::grpc::ClientContext* context, const ::proto::GetSwcFullNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcFullNodeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcNodeDataListByTimeAndUser(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataListByTimeAndUserRequest& request, ::proto::GetSwcNodeDataListByTimeAndUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcNodeDataListByTimeAndUserRequest, ::proto::GetSwcNodeDataListByTimeAndUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcNodeDataListByTimeAndUser_, context, request, response);
}

void DBMS::Stub::async::GetSwcNodeDataListByTimeAndUser(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataListByTimeAndUserRequest* request, ::proto::GetSwcNodeDataListByTimeAndUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcNodeDataListByTimeAndUserRequest, ::proto::GetSwcNodeDataListByTimeAndUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcNodeDataListByTimeAndUser_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcNodeDataListByTimeAndUser(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataListByTimeAndUserRequest* request, ::proto::GetSwcNodeDataListByTimeAndUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcNodeDataListByTimeAndUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcNodeDataListByTimeAndUserResponse>* DBMS::Stub::PrepareAsyncGetSwcNodeDataListByTimeAndUserRaw(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataListByTimeAndUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcNodeDataListByTimeAndUserResponse, ::proto::GetSwcNodeDataListByTimeAndUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcNodeDataListByTimeAndUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcNodeDataListByTimeAndUserResponse>* DBMS::Stub::AsyncGetSwcNodeDataListByTimeAndUserRaw(::grpc::ClientContext* context, const ::proto::GetSwcNodeDataListByTimeAndUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcNodeDataListByTimeAndUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateDailyStatistics(::grpc::ClientContext* context, const ::proto::CreateDailyStatisticsRequest& request, ::proto::CreateDailyStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateDailyStatisticsRequest, ::proto::CreateDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDailyStatistics_, context, request, response);
}

void DBMS::Stub::async::CreateDailyStatistics(::grpc::ClientContext* context, const ::proto::CreateDailyStatisticsRequest* request, ::proto::CreateDailyStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateDailyStatisticsRequest, ::proto::CreateDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDailyStatistics_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateDailyStatistics(::grpc::ClientContext* context, const ::proto::CreateDailyStatisticsRequest* request, ::proto::CreateDailyStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDailyStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateDailyStatisticsResponse>* DBMS::Stub::PrepareAsyncCreateDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::CreateDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateDailyStatisticsResponse, ::proto::CreateDailyStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDailyStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateDailyStatisticsResponse>* DBMS::Stub::AsyncCreateDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::CreateDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDailyStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteDailyStatistics(::grpc::ClientContext* context, const ::proto::DeleteDailyStatisticsRequest& request, ::proto::DeleteDailyStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteDailyStatisticsRequest, ::proto::DeleteDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDailyStatistics_, context, request, response);
}

void DBMS::Stub::async::DeleteDailyStatistics(::grpc::ClientContext* context, const ::proto::DeleteDailyStatisticsRequest* request, ::proto::DeleteDailyStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteDailyStatisticsRequest, ::proto::DeleteDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDailyStatistics_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteDailyStatistics(::grpc::ClientContext* context, const ::proto::DeleteDailyStatisticsRequest* request, ::proto::DeleteDailyStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDailyStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteDailyStatisticsResponse>* DBMS::Stub::PrepareAsyncDeleteDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::DeleteDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteDailyStatisticsResponse, ::proto::DeleteDailyStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDailyStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteDailyStatisticsResponse>* DBMS::Stub::AsyncDeleteDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::DeleteDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDailyStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateDailyStatistics(::grpc::ClientContext* context, const ::proto::UpdateDailyStatisticsRequest& request, ::proto::UpdateDailyStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateDailyStatisticsRequest, ::proto::UpdateDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDailyStatistics_, context, request, response);
}

void DBMS::Stub::async::UpdateDailyStatistics(::grpc::ClientContext* context, const ::proto::UpdateDailyStatisticsRequest* request, ::proto::UpdateDailyStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateDailyStatisticsRequest, ::proto::UpdateDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDailyStatistics_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateDailyStatistics(::grpc::ClientContext* context, const ::proto::UpdateDailyStatisticsRequest* request, ::proto::UpdateDailyStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDailyStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateDailyStatisticsResponse>* DBMS::Stub::PrepareAsyncUpdateDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::UpdateDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateDailyStatisticsResponse, ::proto::UpdateDailyStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDailyStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateDailyStatisticsResponse>* DBMS::Stub::AsyncUpdateDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::UpdateDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDailyStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetDailyStatistics(::grpc::ClientContext* context, const ::proto::GetDailyStatisticsRequest& request, ::proto::GetDailyStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetDailyStatisticsRequest, ::proto::GetDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDailyStatistics_, context, request, response);
}

void DBMS::Stub::async::GetDailyStatistics(::grpc::ClientContext* context, const ::proto::GetDailyStatisticsRequest* request, ::proto::GetDailyStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetDailyStatisticsRequest, ::proto::GetDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDailyStatistics_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetDailyStatistics(::grpc::ClientContext* context, const ::proto::GetDailyStatisticsRequest* request, ::proto::GetDailyStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDailyStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetDailyStatisticsResponse>* DBMS::Stub::PrepareAsyncGetDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::GetDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetDailyStatisticsResponse, ::proto::GetDailyStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDailyStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetDailyStatisticsResponse>* DBMS::Stub::AsyncGetDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::GetDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDailyStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetAllDailyStatistics(::grpc::ClientContext* context, const ::proto::GetAllDailyStatisticsRequest& request, ::proto::GetAllDailyStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAllDailyStatisticsRequest, ::proto::GetAllDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllDailyStatistics_, context, request, response);
}

void DBMS::Stub::async::GetAllDailyStatistics(::grpc::ClientContext* context, const ::proto::GetAllDailyStatisticsRequest* request, ::proto::GetAllDailyStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAllDailyStatisticsRequest, ::proto::GetAllDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllDailyStatistics_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetAllDailyStatistics(::grpc::ClientContext* context, const ::proto::GetAllDailyStatisticsRequest* request, ::proto::GetAllDailyStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllDailyStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllDailyStatisticsResponse>* DBMS::Stub::PrepareAsyncGetAllDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::GetAllDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAllDailyStatisticsResponse, ::proto::GetAllDailyStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllDailyStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAllDailyStatisticsResponse>* DBMS::Stub::AsyncGetAllDailyStatisticsRaw(::grpc::ClientContext* context, const ::proto::GetAllDailyStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllDailyStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentAnoRequest& request, ::proto::CreateSwcAttachmentAnoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateSwcAttachmentAnoRequest, ::proto::CreateSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSwcAttachmentAno_, context, request, response);
}

void DBMS::Stub::async::CreateSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentAnoRequest* request, ::proto::CreateSwcAttachmentAnoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateSwcAttachmentAnoRequest, ::proto::CreateSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcAttachmentAno_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentAnoRequest* request, ::proto::CreateSwcAttachmentAnoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcAttachmentAno_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcAttachmentAnoResponse>* DBMS::Stub::PrepareAsyncCreateSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateSwcAttachmentAnoResponse, ::proto::CreateSwcAttachmentAnoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSwcAttachmentAno_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcAttachmentAnoResponse>* DBMS::Stub::AsyncCreateSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSwcAttachmentAnoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentAnoRequest& request, ::proto::DeleteSwcAttachmentAnoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteSwcAttachmentAnoRequest, ::proto::DeleteSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSwcAttachmentAno_, context, request, response);
}

void DBMS::Stub::async::DeleteSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentAnoRequest* request, ::proto::DeleteSwcAttachmentAnoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteSwcAttachmentAnoRequest, ::proto::DeleteSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcAttachmentAno_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentAnoRequest* request, ::proto::DeleteSwcAttachmentAnoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcAttachmentAno_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcAttachmentAnoResponse>* DBMS::Stub::PrepareAsyncDeleteSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteSwcAttachmentAnoResponse, ::proto::DeleteSwcAttachmentAnoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSwcAttachmentAno_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcAttachmentAnoResponse>* DBMS::Stub::AsyncDeleteSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSwcAttachmentAnoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentAnoRequest& request, ::proto::UpdateSwcAttachmentAnoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateSwcAttachmentAnoRequest, ::proto::UpdateSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSwcAttachmentAno_, context, request, response);
}

void DBMS::Stub::async::UpdateSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentAnoRequest* request, ::proto::UpdateSwcAttachmentAnoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateSwcAttachmentAnoRequest, ::proto::UpdateSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcAttachmentAno_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentAnoRequest* request, ::proto::UpdateSwcAttachmentAnoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcAttachmentAno_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcAttachmentAnoResponse>* DBMS::Stub::PrepareAsyncUpdateSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateSwcAttachmentAnoResponse, ::proto::UpdateSwcAttachmentAnoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSwcAttachmentAno_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcAttachmentAnoResponse>* DBMS::Stub::AsyncUpdateSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSwcAttachmentAnoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentAnoRequest& request, ::proto::GetSwcAttachmentAnoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcAttachmentAnoRequest, ::proto::GetSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcAttachmentAno_, context, request, response);
}

void DBMS::Stub::async::GetSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentAnoRequest* request, ::proto::GetSwcAttachmentAnoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcAttachmentAnoRequest, ::proto::GetSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcAttachmentAno_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcAttachmentAno(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentAnoRequest* request, ::proto::GetSwcAttachmentAnoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcAttachmentAno_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcAttachmentAnoResponse>* DBMS::Stub::PrepareAsyncGetSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcAttachmentAnoResponse, ::proto::GetSwcAttachmentAnoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcAttachmentAno_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcAttachmentAnoResponse>* DBMS::Stub::AsyncGetSwcAttachmentAnoRaw(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentAnoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcAttachmentAnoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentApoRequest& request, ::proto::CreateSwcAttachmentApoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateSwcAttachmentApoRequest, ::proto::CreateSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSwcAttachmentApo_, context, request, response);
}

void DBMS::Stub::async::CreateSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentApoRequest* request, ::proto::CreateSwcAttachmentApoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateSwcAttachmentApoRequest, ::proto::CreateSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcAttachmentApo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentApoRequest* request, ::proto::CreateSwcAttachmentApoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcAttachmentApo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcAttachmentApoResponse>* DBMS::Stub::PrepareAsyncCreateSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateSwcAttachmentApoResponse, ::proto::CreateSwcAttachmentApoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSwcAttachmentApo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcAttachmentApoResponse>* DBMS::Stub::AsyncCreateSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSwcAttachmentApoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentApoRequest& request, ::proto::DeleteSwcAttachmentApoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteSwcAttachmentApoRequest, ::proto::DeleteSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSwcAttachmentApo_, context, request, response);
}

void DBMS::Stub::async::DeleteSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentApoRequest* request, ::proto::DeleteSwcAttachmentApoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteSwcAttachmentApoRequest, ::proto::DeleteSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcAttachmentApo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentApoRequest* request, ::proto::DeleteSwcAttachmentApoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcAttachmentApo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcAttachmentApoResponse>* DBMS::Stub::PrepareAsyncDeleteSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteSwcAttachmentApoResponse, ::proto::DeleteSwcAttachmentApoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSwcAttachmentApo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcAttachmentApoResponse>* DBMS::Stub::AsyncDeleteSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSwcAttachmentApoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentApoRequest& request, ::proto::UpdateSwcAttachmentApoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateSwcAttachmentApoRequest, ::proto::UpdateSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSwcAttachmentApo_, context, request, response);
}

void DBMS::Stub::async::UpdateSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentApoRequest* request, ::proto::UpdateSwcAttachmentApoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateSwcAttachmentApoRequest, ::proto::UpdateSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcAttachmentApo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentApoRequest* request, ::proto::UpdateSwcAttachmentApoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcAttachmentApo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcAttachmentApoResponse>* DBMS::Stub::PrepareAsyncUpdateSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateSwcAttachmentApoResponse, ::proto::UpdateSwcAttachmentApoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSwcAttachmentApo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcAttachmentApoResponse>* DBMS::Stub::AsyncUpdateSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSwcAttachmentApoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentApoRequest& request, ::proto::GetSwcAttachmentApoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcAttachmentApoRequest, ::proto::GetSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcAttachmentApo_, context, request, response);
}

void DBMS::Stub::async::GetSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentApoRequest* request, ::proto::GetSwcAttachmentApoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcAttachmentApoRequest, ::proto::GetSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcAttachmentApo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcAttachmentApo(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentApoRequest* request, ::proto::GetSwcAttachmentApoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcAttachmentApo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcAttachmentApoResponse>* DBMS::Stub::PrepareAsyncGetSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcAttachmentApoResponse, ::proto::GetSwcAttachmentApoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcAttachmentApo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcAttachmentApoResponse>* DBMS::Stub::AsyncGetSwcAttachmentApoRaw(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentApoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcAttachmentApoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::RevertSwcVersion(::grpc::ClientContext* context, const ::proto::RevertSwcVersionRequest& request, ::proto::RevertSwcVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::RevertSwcVersionRequest, ::proto::RevertSwcVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RevertSwcVersion_, context, request, response);
}

void DBMS::Stub::async::RevertSwcVersion(::grpc::ClientContext* context, const ::proto::RevertSwcVersionRequest* request, ::proto::RevertSwcVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::RevertSwcVersionRequest, ::proto::RevertSwcVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RevertSwcVersion_, context, request, response, std::move(f));
}

void DBMS::Stub::async::RevertSwcVersion(::grpc::ClientContext* context, const ::proto::RevertSwcVersionRequest* request, ::proto::RevertSwcVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RevertSwcVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::RevertSwcVersionResponse>* DBMS::Stub::PrepareAsyncRevertSwcVersionRaw(::grpc::ClientContext* context, const ::proto::RevertSwcVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::RevertSwcVersionResponse, ::proto::RevertSwcVersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RevertSwcVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::RevertSwcVersionResponse>* DBMS::Stub::AsyncRevertSwcVersionRaw(::grpc::ClientContext* context, const ::proto::RevertSwcVersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRevertSwcVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreateSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentSwcRequest& request, ::proto::CreateSwcAttachmentSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateSwcAttachmentSwcRequest, ::proto::CreateSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSwcAttachmentSwc_, context, request, response);
}

void DBMS::Stub::async::CreateSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentSwcRequest* request, ::proto::CreateSwcAttachmentSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateSwcAttachmentSwcRequest, ::proto::CreateSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcAttachmentSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreateSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentSwcRequest* request, ::proto::CreateSwcAttachmentSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSwcAttachmentSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcAttachmentSwcResponse>* DBMS::Stub::PrepareAsyncCreateSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreateSwcAttachmentSwcResponse, ::proto::CreateSwcAttachmentSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSwcAttachmentSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreateSwcAttachmentSwcResponse>* DBMS::Stub::AsyncCreateSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::CreateSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSwcAttachmentSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeleteSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentSwcRequest& request, ::proto::DeleteSwcAttachmentSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeleteSwcAttachmentSwcRequest, ::proto::DeleteSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSwcAttachmentSwc_, context, request, response);
}

void DBMS::Stub::async::DeleteSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentSwcRequest* request, ::proto::DeleteSwcAttachmentSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeleteSwcAttachmentSwcRequest, ::proto::DeleteSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcAttachmentSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeleteSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentSwcRequest* request, ::proto::DeleteSwcAttachmentSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSwcAttachmentSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcAttachmentSwcResponse>* DBMS::Stub::PrepareAsyncDeleteSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeleteSwcAttachmentSwcResponse, ::proto::DeleteSwcAttachmentSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSwcAttachmentSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeleteSwcAttachmentSwcResponse>* DBMS::Stub::AsyncDeleteSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::DeleteSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSwcAttachmentSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentSwcRequest& request, ::proto::UpdateSwcAttachmentSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateSwcAttachmentSwcRequest, ::proto::UpdateSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSwcAttachmentSwc_, context, request, response);
}

void DBMS::Stub::async::UpdateSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentSwcRequest* request, ::proto::UpdateSwcAttachmentSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateSwcAttachmentSwcRequest, ::proto::UpdateSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcAttachmentSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentSwcRequest* request, ::proto::UpdateSwcAttachmentSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcAttachmentSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcAttachmentSwcResponse>* DBMS::Stub::PrepareAsyncUpdateSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateSwcAttachmentSwcResponse, ::proto::UpdateSwcAttachmentSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSwcAttachmentSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcAttachmentSwcResponse>* DBMS::Stub::AsyncUpdateSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSwcAttachmentSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentSwcRequest& request, ::proto::GetSwcAttachmentSwcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetSwcAttachmentSwcRequest, ::proto::GetSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSwcAttachmentSwc_, context, request, response);
}

void DBMS::Stub::async::GetSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentSwcRequest* request, ::proto::GetSwcAttachmentSwcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetSwcAttachmentSwcRequest, ::proto::GetSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcAttachmentSwc_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetSwcAttachmentSwc(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentSwcRequest* request, ::proto::GetSwcAttachmentSwcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSwcAttachmentSwc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcAttachmentSwcResponse>* DBMS::Stub::PrepareAsyncGetSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetSwcAttachmentSwcResponse, ::proto::GetSwcAttachmentSwcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSwcAttachmentSwc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetSwcAttachmentSwcResponse>* DBMS::Stub::AsyncGetSwcAttachmentSwcRaw(::grpc::ClientContext* context, const ::proto::GetSwcAttachmentSwcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSwcAttachmentSwcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::CreatePermissionGroup(::grpc::ClientContext* context, const ::proto::CreatePermissionGroupRequest& request, ::proto::CreatePermissionGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreatePermissionGroupRequest, ::proto::CreatePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePermissionGroup_, context, request, response);
}

void DBMS::Stub::async::CreatePermissionGroup(::grpc::ClientContext* context, const ::proto::CreatePermissionGroupRequest* request, ::proto::CreatePermissionGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreatePermissionGroupRequest, ::proto::CreatePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePermissionGroup_, context, request, response, std::move(f));
}

void DBMS::Stub::async::CreatePermissionGroup(::grpc::ClientContext* context, const ::proto::CreatePermissionGroupRequest* request, ::proto::CreatePermissionGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePermissionGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::CreatePermissionGroupResponse>* DBMS::Stub::PrepareAsyncCreatePermissionGroupRaw(::grpc::ClientContext* context, const ::proto::CreatePermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::CreatePermissionGroupResponse, ::proto::CreatePermissionGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePermissionGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::CreatePermissionGroupResponse>* DBMS::Stub::AsyncCreatePermissionGroupRaw(::grpc::ClientContext* context, const ::proto::CreatePermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePermissionGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::DeletePermissionGroup(::grpc::ClientContext* context, const ::proto::DeletePermissionGroupRequest& request, ::proto::DeletePermissionGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DeletePermissionGroupRequest, ::proto::DeletePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePermissionGroup_, context, request, response);
}

void DBMS::Stub::async::DeletePermissionGroup(::grpc::ClientContext* context, const ::proto::DeletePermissionGroupRequest* request, ::proto::DeletePermissionGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DeletePermissionGroupRequest, ::proto::DeletePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionGroup_, context, request, response, std::move(f));
}

void DBMS::Stub::async::DeletePermissionGroup(::grpc::ClientContext* context, const ::proto::DeletePermissionGroupRequest* request, ::proto::DeletePermissionGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePermissionGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DeletePermissionGroupResponse>* DBMS::Stub::PrepareAsyncDeletePermissionGroupRaw(::grpc::ClientContext* context, const ::proto::DeletePermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DeletePermissionGroupResponse, ::proto::DeletePermissionGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePermissionGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DeletePermissionGroupResponse>* DBMS::Stub::AsyncDeletePermissionGroupRaw(::grpc::ClientContext* context, const ::proto::DeletePermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePermissionGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdatePermissionGroup(::grpc::ClientContext* context, const ::proto::UpdatePermissionGroupRequest& request, ::proto::UpdatePermissionGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdatePermissionGroupRequest, ::proto::UpdatePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdatePermissionGroup_, context, request, response);
}

void DBMS::Stub::async::UpdatePermissionGroup(::grpc::ClientContext* context, const ::proto::UpdatePermissionGroupRequest* request, ::proto::UpdatePermissionGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdatePermissionGroupRequest, ::proto::UpdatePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePermissionGroup_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdatePermissionGroup(::grpc::ClientContext* context, const ::proto::UpdatePermissionGroupRequest* request, ::proto::UpdatePermissionGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePermissionGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdatePermissionGroupResponse>* DBMS::Stub::PrepareAsyncUpdatePermissionGroupRaw(::grpc::ClientContext* context, const ::proto::UpdatePermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdatePermissionGroupResponse, ::proto::UpdatePermissionGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdatePermissionGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdatePermissionGroupResponse>* DBMS::Stub::AsyncUpdatePermissionGroupRaw(::grpc::ClientContext* context, const ::proto::UpdatePermissionGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdatePermissionGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::GetProjectSwcNamesByProjectUuid(::grpc::ClientContext* context, const ::proto::GetProjectSwcNamesByProjectUuidRequest& request, ::proto::GetProjectSwcNamesByProjectUuidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetProjectSwcNamesByProjectUuidRequest, ::proto::GetProjectSwcNamesByProjectUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProjectSwcNamesByProjectUuid_, context, request, response);
}

void DBMS::Stub::async::GetProjectSwcNamesByProjectUuid(::grpc::ClientContext* context, const ::proto::GetProjectSwcNamesByProjectUuidRequest* request, ::proto::GetProjectSwcNamesByProjectUuidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetProjectSwcNamesByProjectUuidRequest, ::proto::GetProjectSwcNamesByProjectUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProjectSwcNamesByProjectUuid_, context, request, response, std::move(f));
}

void DBMS::Stub::async::GetProjectSwcNamesByProjectUuid(::grpc::ClientContext* context, const ::proto::GetProjectSwcNamesByProjectUuidRequest* request, ::proto::GetProjectSwcNamesByProjectUuidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProjectSwcNamesByProjectUuid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetProjectSwcNamesByProjectUuidResponse>* DBMS::Stub::PrepareAsyncGetProjectSwcNamesByProjectUuidRaw(::grpc::ClientContext* context, const ::proto::GetProjectSwcNamesByProjectUuidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetProjectSwcNamesByProjectUuidResponse, ::proto::GetProjectSwcNamesByProjectUuidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProjectSwcNamesByProjectUuid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetProjectSwcNamesByProjectUuidResponse>* DBMS::Stub::AsyncGetProjectSwcNamesByProjectUuidRaw(::grpc::ClientContext* context, const ::proto::GetProjectSwcNamesByProjectUuidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProjectSwcNamesByProjectUuidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::UpdateSwcNParentInfo(::grpc::ClientContext* context, const ::proto::UpdateSwcNParentInfoRequest& request, ::proto::UpdateSwcNParentInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UpdateSwcNParentInfoRequest, ::proto::UpdateSwcNParentInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSwcNParentInfo_, context, request, response);
}

void DBMS::Stub::async::UpdateSwcNParentInfo(::grpc::ClientContext* context, const ::proto::UpdateSwcNParentInfoRequest* request, ::proto::UpdateSwcNParentInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UpdateSwcNParentInfoRequest, ::proto::UpdateSwcNParentInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcNParentInfo_, context, request, response, std::move(f));
}

void DBMS::Stub::async::UpdateSwcNParentInfo(::grpc::ClientContext* context, const ::proto::UpdateSwcNParentInfoRequest* request, ::proto::UpdateSwcNParentInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSwcNParentInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcNParentInfoResponse>* DBMS::Stub::PrepareAsyncUpdateSwcNParentInfoRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcNParentInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::UpdateSwcNParentInfoResponse, ::proto::UpdateSwcNParentInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSwcNParentInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::UpdateSwcNParentInfoResponse>* DBMS::Stub::AsyncUpdateSwcNParentInfoRaw(::grpc::ClientContext* context, const ::proto::UpdateSwcNParentInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSwcNParentInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::ClearAllNodes(::grpc::ClientContext* context, const ::proto::ClearAllNodesRequest& request, ::proto::ClearAllNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::ClearAllNodesRequest, ::proto::ClearAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearAllNodes_, context, request, response);
}

void DBMS::Stub::async::ClearAllNodes(::grpc::ClientContext* context, const ::proto::ClearAllNodesRequest* request, ::proto::ClearAllNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::ClearAllNodesRequest, ::proto::ClearAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearAllNodes_, context, request, response, std::move(f));
}

void DBMS::Stub::async::ClearAllNodes(::grpc::ClientContext* context, const ::proto::ClearAllNodesRequest* request, ::proto::ClearAllNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearAllNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::ClearAllNodesResponse>* DBMS::Stub::PrepareAsyncClearAllNodesRaw(::grpc::ClientContext* context, const ::proto::ClearAllNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::ClearAllNodesResponse, ::proto::ClearAllNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearAllNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::ClearAllNodesResponse>* DBMS::Stub::AsyncClearAllNodesRaw(::grpc::ClientContext* context, const ::proto::ClearAllNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearAllNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DBMS::Stub::OverwriteSwcNodeData(::grpc::ClientContext* context, const ::proto::OverwriteSwcNodeDataRequest& request, ::proto::OverwriteSwcNodeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::OverwriteSwcNodeDataRequest, ::proto::OverwriteSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OverwriteSwcNodeData_, context, request, response);
}

void DBMS::Stub::async::OverwriteSwcNodeData(::grpc::ClientContext* context, const ::proto::OverwriteSwcNodeDataRequest* request, ::proto::OverwriteSwcNodeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::OverwriteSwcNodeDataRequest, ::proto::OverwriteSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OverwriteSwcNodeData_, context, request, response, std::move(f));
}

void DBMS::Stub::async::OverwriteSwcNodeData(::grpc::ClientContext* context, const ::proto::OverwriteSwcNodeDataRequest* request, ::proto::OverwriteSwcNodeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OverwriteSwcNodeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::OverwriteSwcNodeDataResponse>* DBMS::Stub::PrepareAsyncOverwriteSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::OverwriteSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::OverwriteSwcNodeDataResponse, ::proto::OverwriteSwcNodeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OverwriteSwcNodeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::OverwriteSwcNodeDataResponse>* DBMS::Stub::AsyncOverwriteSwcNodeDataRaw(::grpc::ClientContext* context, const ::proto::OverwriteSwcNodeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOverwriteSwcNodeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

DBMS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateUserRequest, ::proto::CreateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateUserRequest* req,
             ::proto::CreateUserResponse* resp) {
               return service->CreateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteUserRequest, ::proto::DeleteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteUserRequest* req,
             ::proto::DeleteUserResponse* resp) {
               return service->DeleteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateUserRequest, ::proto::UpdateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateUserRequest* req,
             ::proto::UpdateUserResponse* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetUserByUuidRequest, ::proto::GetUserByUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetUserByUuidRequest* req,
             ::proto::GetUserByUuidResponse* resp) {
               return service->GetUserByUuid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetUserByNameRequest, ::proto::GetUserByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetUserByNameRequest* req,
             ::proto::GetUserByNameResponse* resp) {
               return service->GetUserByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllUserRequest, ::proto::GetAllUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllUserRequest* req,
             ::proto::GetAllUserResponse* resp) {
               return service->GetAllUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UserLoginRequest, ::proto::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UserLoginRequest* req,
             ::proto::UserLoginResponse* resp) {
               return service->UserLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UserLogoutRequest, ::proto::UserLogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UserLogoutRequest* req,
             ::proto::UserLogoutResponse* resp) {
               return service->UserLogout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UserOnlineHeartBeatNotification, ::proto::UserOnlineHeartBeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UserOnlineHeartBeatNotification* req,
             ::proto::UserOnlineHeartBeatResponse* resp) {
               return service->UserOnlineHeartBeatNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetUserPermissionGroupRequest, ::proto::GetUserPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetUserPermissionGroupRequest* req,
             ::proto::GetUserPermissionGroupResponse* resp) {
               return service->GetUserPermissionGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetPermissionGroupByUuidRequest, ::proto::GetPermissionGroupByUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetPermissionGroupByUuidRequest* req,
             ::proto::GetPermissionGroupByUuidResponse* resp) {
               return service->GetPermissionGroupByUuid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetPermissionGroupByNameRequest, ::proto::GetPermissionGroupByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetPermissionGroupByNameRequest* req,
             ::proto::GetPermissionGroupByNameResponse* resp) {
               return service->GetPermissionGroupByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllPermissionGroupRequest, ::proto::GetAllPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllPermissionGroupRequest* req,
             ::proto::GetAllPermissionGroupResponse* resp) {
               return service->GetAllPermissionGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::ChangeUserPermissionGroupRequest, ::proto::ChangeUserPermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::ChangeUserPermissionGroupRequest* req,
             ::proto::ChangeUserPermissionGroupResponse* resp) {
               return service->ChangeUserPermissionGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateProjectRequest, ::proto::CreateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateProjectRequest* req,
             ::proto::CreateProjectResponse* resp) {
               return service->CreateProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteProjectRequest, ::proto::DeleteProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteProjectRequest* req,
             ::proto::DeleteProjectResponse* resp) {
               return service->DeleteProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateProjectRequest, ::proto::UpdateProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateProjectRequest* req,
             ::proto::UpdateProjectResponse* resp) {
               return service->UpdateProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetProjectRequest, ::proto::GetProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetProjectRequest* req,
             ::proto::GetProjectResponse* resp) {
               return service->GetProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllProjectRequest, ::proto::GetAllProjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllProjectRequest* req,
             ::proto::GetAllProjectResponse* resp) {
               return service->GetAllProject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateSwcRequest, ::proto::CreateSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateSwcRequest* req,
             ::proto::CreateSwcResponse* resp) {
               return service->CreateSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteSwcRequest, ::proto::DeleteSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteSwcRequest* req,
             ::proto::DeleteSwcResponse* resp) {
               return service->DeleteSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateSwcRequest, ::proto::UpdateSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateSwcRequest* req,
             ::proto::UpdateSwcResponse* resp) {
               return service->UpdateSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcMetaInfoRequest, ::proto::GetSwcMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcMetaInfoRequest* req,
             ::proto::GetSwcMetaInfoResponse* resp) {
               return service->GetSwcMetaInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllSwcMetaInfoRequest, ::proto::GetAllSwcMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllSwcMetaInfoRequest* req,
             ::proto::GetAllSwcMetaInfoResponse* resp) {
               return service->GetAllSwcMetaInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateSwcSnapshotRequest, ::proto::CreateSwcSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateSwcSnapshotRequest* req,
             ::proto::CreateSwcSnapshotResponse* resp) {
               return service->CreateSwcSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllSnapshotMetaInfoRequest, ::proto::GetAllSnapshotMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllSnapshotMetaInfoRequest* req,
             ::proto::GetAllSnapshotMetaInfoResponse* resp) {
               return service->GetAllSnapshotMetaInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSnapshotRequest, ::proto::GetSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSnapshotRequest* req,
             ::proto::GetSnapshotResponse* resp) {
               return service->GetSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllIncrementOperationMetaInfoRequest, ::proto::GetAllIncrementOperationMetaInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllIncrementOperationMetaInfoRequest* req,
             ::proto::GetAllIncrementOperationMetaInfoResponse* resp) {
               return service->GetAllIncrementOperationMetaInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetIncrementOperationRequest, ::proto::GetIncrementOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetIncrementOperationRequest* req,
             ::proto::GetIncrementOperationResponse* resp) {
               return service->GetIncrementOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateSwcNodeDataRequest, ::proto::CreateSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateSwcNodeDataRequest* req,
             ::proto::CreateSwcNodeDataResponse* resp) {
               return service->CreateSwcNodeData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteSwcNodeDataRequest, ::proto::DeleteSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteSwcNodeDataRequest* req,
             ::proto::DeleteSwcNodeDataResponse* resp) {
               return service->DeleteSwcNodeData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateSwcNodeDataRequest, ::proto::UpdateSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateSwcNodeDataRequest* req,
             ::proto::UpdateSwcNodeDataResponse* resp) {
               return service->UpdateSwcNodeData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcNodeDataRequest, ::proto::GetSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcNodeDataRequest* req,
             ::proto::GetSwcNodeDataResponse* resp) {
               return service->GetSwcNodeData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcFullNodeDataRequest, ::proto::GetSwcFullNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcFullNodeDataRequest* req,
             ::proto::GetSwcFullNodeDataResponse* resp) {
               return service->GetSwcFullNodeData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcNodeDataListByTimeAndUserRequest, ::proto::GetSwcNodeDataListByTimeAndUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcNodeDataListByTimeAndUserRequest* req,
             ::proto::GetSwcNodeDataListByTimeAndUserResponse* resp) {
               return service->GetSwcNodeDataListByTimeAndUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateDailyStatisticsRequest, ::proto::CreateDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateDailyStatisticsRequest* req,
             ::proto::CreateDailyStatisticsResponse* resp) {
               return service->CreateDailyStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteDailyStatisticsRequest, ::proto::DeleteDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteDailyStatisticsRequest* req,
             ::proto::DeleteDailyStatisticsResponse* resp) {
               return service->DeleteDailyStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateDailyStatisticsRequest, ::proto::UpdateDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateDailyStatisticsRequest* req,
             ::proto::UpdateDailyStatisticsResponse* resp) {
               return service->UpdateDailyStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetDailyStatisticsRequest, ::proto::GetDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetDailyStatisticsRequest* req,
             ::proto::GetDailyStatisticsResponse* resp) {
               return service->GetDailyStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetAllDailyStatisticsRequest, ::proto::GetAllDailyStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAllDailyStatisticsRequest* req,
             ::proto::GetAllDailyStatisticsResponse* resp) {
               return service->GetAllDailyStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateSwcAttachmentAnoRequest, ::proto::CreateSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateSwcAttachmentAnoRequest* req,
             ::proto::CreateSwcAttachmentAnoResponse* resp) {
               return service->CreateSwcAttachmentAno(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteSwcAttachmentAnoRequest, ::proto::DeleteSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteSwcAttachmentAnoRequest* req,
             ::proto::DeleteSwcAttachmentAnoResponse* resp) {
               return service->DeleteSwcAttachmentAno(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateSwcAttachmentAnoRequest, ::proto::UpdateSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateSwcAttachmentAnoRequest* req,
             ::proto::UpdateSwcAttachmentAnoResponse* resp) {
               return service->UpdateSwcAttachmentAno(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcAttachmentAnoRequest, ::proto::GetSwcAttachmentAnoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcAttachmentAnoRequest* req,
             ::proto::GetSwcAttachmentAnoResponse* resp) {
               return service->GetSwcAttachmentAno(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateSwcAttachmentApoRequest, ::proto::CreateSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateSwcAttachmentApoRequest* req,
             ::proto::CreateSwcAttachmentApoResponse* resp) {
               return service->CreateSwcAttachmentApo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteSwcAttachmentApoRequest, ::proto::DeleteSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteSwcAttachmentApoRequest* req,
             ::proto::DeleteSwcAttachmentApoResponse* resp) {
               return service->DeleteSwcAttachmentApo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateSwcAttachmentApoRequest, ::proto::UpdateSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateSwcAttachmentApoRequest* req,
             ::proto::UpdateSwcAttachmentApoResponse* resp) {
               return service->UpdateSwcAttachmentApo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcAttachmentApoRequest, ::proto::GetSwcAttachmentApoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcAttachmentApoRequest* req,
             ::proto::GetSwcAttachmentApoResponse* resp) {
               return service->GetSwcAttachmentApo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::RevertSwcVersionRequest, ::proto::RevertSwcVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::RevertSwcVersionRequest* req,
             ::proto::RevertSwcVersionResponse* resp) {
               return service->RevertSwcVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreateSwcAttachmentSwcRequest, ::proto::CreateSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateSwcAttachmentSwcRequest* req,
             ::proto::CreateSwcAttachmentSwcResponse* resp) {
               return service->CreateSwcAttachmentSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeleteSwcAttachmentSwcRequest, ::proto::DeleteSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeleteSwcAttachmentSwcRequest* req,
             ::proto::DeleteSwcAttachmentSwcResponse* resp) {
               return service->DeleteSwcAttachmentSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateSwcAttachmentSwcRequest, ::proto::UpdateSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateSwcAttachmentSwcRequest* req,
             ::proto::UpdateSwcAttachmentSwcResponse* resp) {
               return service->UpdateSwcAttachmentSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetSwcAttachmentSwcRequest, ::proto::GetSwcAttachmentSwcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetSwcAttachmentSwcRequest* req,
             ::proto::GetSwcAttachmentSwcResponse* resp) {
               return service->GetSwcAttachmentSwc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::CreatePermissionGroupRequest, ::proto::CreatePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreatePermissionGroupRequest* req,
             ::proto::CreatePermissionGroupResponse* resp) {
               return service->CreatePermissionGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::DeletePermissionGroupRequest, ::proto::DeletePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DeletePermissionGroupRequest* req,
             ::proto::DeletePermissionGroupResponse* resp) {
               return service->DeletePermissionGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdatePermissionGroupRequest, ::proto::UpdatePermissionGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdatePermissionGroupRequest* req,
             ::proto::UpdatePermissionGroupResponse* resp) {
               return service->UpdatePermissionGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::GetProjectSwcNamesByProjectUuidRequest, ::proto::GetProjectSwcNamesByProjectUuidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetProjectSwcNamesByProjectUuidRequest* req,
             ::proto::GetProjectSwcNamesByProjectUuidResponse* resp) {
               return service->GetProjectSwcNamesByProjectUuid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::UpdateSwcNParentInfoRequest, ::proto::UpdateSwcNParentInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UpdateSwcNParentInfoRequest* req,
             ::proto::UpdateSwcNParentInfoResponse* resp) {
               return service->UpdateSwcNParentInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::ClearAllNodesRequest, ::proto::ClearAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::ClearAllNodesRequest* req,
             ::proto::ClearAllNodesResponse* resp) {
               return service->ClearAllNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBMS_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBMS::Service, ::proto::OverwriteSwcNodeDataRequest, ::proto::OverwriteSwcNodeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBMS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::OverwriteSwcNodeDataRequest* req,
             ::proto::OverwriteSwcNodeDataResponse* resp) {
               return service->OverwriteSwcNodeData(ctx, req, resp);
             }, this)));
}

DBMS::Service::~Service() {
}

::grpc::Status DBMS::Service::CreateUser(::grpc::ServerContext* context, const ::proto::CreateUserRequest* request, ::proto::CreateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteUser(::grpc::ServerContext* context, const ::proto::DeleteUserRequest* request, ::proto::DeleteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateUser(::grpc::ServerContext* context, const ::proto::UpdateUserRequest* request, ::proto::UpdateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetUserByUuid(::grpc::ServerContext* context, const ::proto::GetUserByUuidRequest* request, ::proto::GetUserByUuidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetUserByName(::grpc::ServerContext* context, const ::proto::GetUserByNameRequest* request, ::proto::GetUserByNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllUser(::grpc::ServerContext* context, const ::proto::GetAllUserRequest* request, ::proto::GetAllUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UserLogin(::grpc::ServerContext* context, const ::proto::UserLoginRequest* request, ::proto::UserLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UserLogout(::grpc::ServerContext* context, const ::proto::UserLogoutRequest* request, ::proto::UserLogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UserOnlineHeartBeatNotifications(::grpc::ServerContext* context, const ::proto::UserOnlineHeartBeatNotification* request, ::proto::UserOnlineHeartBeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetUserPermissionGroup(::grpc::ServerContext* context, const ::proto::GetUserPermissionGroupRequest* request, ::proto::GetUserPermissionGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetPermissionGroupByUuid(::grpc::ServerContext* context, const ::proto::GetPermissionGroupByUuidRequest* request, ::proto::GetPermissionGroupByUuidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetPermissionGroupByName(::grpc::ServerContext* context, const ::proto::GetPermissionGroupByNameRequest* request, ::proto::GetPermissionGroupByNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllPermissionGroup(::grpc::ServerContext* context, const ::proto::GetAllPermissionGroupRequest* request, ::proto::GetAllPermissionGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::ChangeUserPermissionGroup(::grpc::ServerContext* context, const ::proto::ChangeUserPermissionGroupRequest* request, ::proto::ChangeUserPermissionGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateProject(::grpc::ServerContext* context, const ::proto::CreateProjectRequest* request, ::proto::CreateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteProject(::grpc::ServerContext* context, const ::proto::DeleteProjectRequest* request, ::proto::DeleteProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateProject(::grpc::ServerContext* context, const ::proto::UpdateProjectRequest* request, ::proto::UpdateProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetProject(::grpc::ServerContext* context, const ::proto::GetProjectRequest* request, ::proto::GetProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllProject(::grpc::ServerContext* context, const ::proto::GetAllProjectRequest* request, ::proto::GetAllProjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateSwc(::grpc::ServerContext* context, const ::proto::CreateSwcRequest* request, ::proto::CreateSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteSwc(::grpc::ServerContext* context, const ::proto::DeleteSwcRequest* request, ::proto::DeleteSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateSwc(::grpc::ServerContext* context, const ::proto::UpdateSwcRequest* request, ::proto::UpdateSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcMetaInfo(::grpc::ServerContext* context, const ::proto::GetSwcMetaInfoRequest* request, ::proto::GetSwcMetaInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllSwcMetaInfo(::grpc::ServerContext* context, const ::proto::GetAllSwcMetaInfoRequest* request, ::proto::GetAllSwcMetaInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateSwcSnapshot(::grpc::ServerContext* context, const ::proto::CreateSwcSnapshotRequest* request, ::proto::CreateSwcSnapshotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllSnapshotMetaInfo(::grpc::ServerContext* context, const ::proto::GetAllSnapshotMetaInfoRequest* request, ::proto::GetAllSnapshotMetaInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSnapshot(::grpc::ServerContext* context, const ::proto::GetSnapshotRequest* request, ::proto::GetSnapshotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllIncrementOperationMetaInfo(::grpc::ServerContext* context, const ::proto::GetAllIncrementOperationMetaInfoRequest* request, ::proto::GetAllIncrementOperationMetaInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetIncrementOperation(::grpc::ServerContext* context, const ::proto::GetIncrementOperationRequest* request, ::proto::GetIncrementOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateSwcNodeData(::grpc::ServerContext* context, const ::proto::CreateSwcNodeDataRequest* request, ::proto::CreateSwcNodeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteSwcNodeData(::grpc::ServerContext* context, const ::proto::DeleteSwcNodeDataRequest* request, ::proto::DeleteSwcNodeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateSwcNodeData(::grpc::ServerContext* context, const ::proto::UpdateSwcNodeDataRequest* request, ::proto::UpdateSwcNodeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcNodeData(::grpc::ServerContext* context, const ::proto::GetSwcNodeDataRequest* request, ::proto::GetSwcNodeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcFullNodeData(::grpc::ServerContext* context, const ::proto::GetSwcFullNodeDataRequest* request, ::proto::GetSwcFullNodeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcNodeDataListByTimeAndUser(::grpc::ServerContext* context, const ::proto::GetSwcNodeDataListByTimeAndUserRequest* request, ::proto::GetSwcNodeDataListByTimeAndUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateDailyStatistics(::grpc::ServerContext* context, const ::proto::CreateDailyStatisticsRequest* request, ::proto::CreateDailyStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteDailyStatistics(::grpc::ServerContext* context, const ::proto::DeleteDailyStatisticsRequest* request, ::proto::DeleteDailyStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateDailyStatistics(::grpc::ServerContext* context, const ::proto::UpdateDailyStatisticsRequest* request, ::proto::UpdateDailyStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetDailyStatistics(::grpc::ServerContext* context, const ::proto::GetDailyStatisticsRequest* request, ::proto::GetDailyStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetAllDailyStatistics(::grpc::ServerContext* context, const ::proto::GetAllDailyStatisticsRequest* request, ::proto::GetAllDailyStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateSwcAttachmentAno(::grpc::ServerContext* context, const ::proto::CreateSwcAttachmentAnoRequest* request, ::proto::CreateSwcAttachmentAnoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteSwcAttachmentAno(::grpc::ServerContext* context, const ::proto::DeleteSwcAttachmentAnoRequest* request, ::proto::DeleteSwcAttachmentAnoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateSwcAttachmentAno(::grpc::ServerContext* context, const ::proto::UpdateSwcAttachmentAnoRequest* request, ::proto::UpdateSwcAttachmentAnoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcAttachmentAno(::grpc::ServerContext* context, const ::proto::GetSwcAttachmentAnoRequest* request, ::proto::GetSwcAttachmentAnoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateSwcAttachmentApo(::grpc::ServerContext* context, const ::proto::CreateSwcAttachmentApoRequest* request, ::proto::CreateSwcAttachmentApoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteSwcAttachmentApo(::grpc::ServerContext* context, const ::proto::DeleteSwcAttachmentApoRequest* request, ::proto::DeleteSwcAttachmentApoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateSwcAttachmentApo(::grpc::ServerContext* context, const ::proto::UpdateSwcAttachmentApoRequest* request, ::proto::UpdateSwcAttachmentApoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcAttachmentApo(::grpc::ServerContext* context, const ::proto::GetSwcAttachmentApoRequest* request, ::proto::GetSwcAttachmentApoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::RevertSwcVersion(::grpc::ServerContext* context, const ::proto::RevertSwcVersionRequest* request, ::proto::RevertSwcVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreateSwcAttachmentSwc(::grpc::ServerContext* context, const ::proto::CreateSwcAttachmentSwcRequest* request, ::proto::CreateSwcAttachmentSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeleteSwcAttachmentSwc(::grpc::ServerContext* context, const ::proto::DeleteSwcAttachmentSwcRequest* request, ::proto::DeleteSwcAttachmentSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateSwcAttachmentSwc(::grpc::ServerContext* context, const ::proto::UpdateSwcAttachmentSwcRequest* request, ::proto::UpdateSwcAttachmentSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetSwcAttachmentSwc(::grpc::ServerContext* context, const ::proto::GetSwcAttachmentSwcRequest* request, ::proto::GetSwcAttachmentSwcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::CreatePermissionGroup(::grpc::ServerContext* context, const ::proto::CreatePermissionGroupRequest* request, ::proto::CreatePermissionGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::DeletePermissionGroup(::grpc::ServerContext* context, const ::proto::DeletePermissionGroupRequest* request, ::proto::DeletePermissionGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdatePermissionGroup(::grpc::ServerContext* context, const ::proto::UpdatePermissionGroupRequest* request, ::proto::UpdatePermissionGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::GetProjectSwcNamesByProjectUuid(::grpc::ServerContext* context, const ::proto::GetProjectSwcNamesByProjectUuidRequest* request, ::proto::GetProjectSwcNamesByProjectUuidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::UpdateSwcNParentInfo(::grpc::ServerContext* context, const ::proto::UpdateSwcNParentInfoRequest* request, ::proto::UpdateSwcNParentInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::ClearAllNodes(::grpc::ServerContext* context, const ::proto::ClearAllNodesRequest* request, ::proto::ClearAllNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBMS::Service::OverwriteSwcNodeData(::grpc::ServerContext* context, const ::proto::OverwriteSwcNodeDataRequest* request, ::proto::OverwriteSwcNodeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

